均值滤波器

function [ o ] = meanfilter( I,n,Q,ad )
%逆谐波均值滤波器，模板为n*n，Q为滤波器阶数，ad==1用来选择几何均值滤波器,Q=0时为算术均值滤波器，Q=-1时为谐波均值滤波器
%  
[M,N]=size(I);
o=zeros(M,N);
a=(n-1)/2;   %补充长度
A=zeros(n,n);   %临时存储去的n*n数据
x=zeros(M+2*a,N+2*a);  %填充后的矩阵
for i=1:M;
    for j=1:N
        x(i+a,j+a)=I(i,j);
    end
end

for i=a+1:M+a
    for j=a+1:N+a
         k=1; 
         for I=i+a:-1:i-a
            for J=j+a:-1:j-a
                A(k)=x(I,J);
                k=k+1;
            end
         end
         if(ad==1)
             S=1;
             for p=1:n*n
                 S=S*A(p);
             end
             o(i-a,j-a)=S^(1/(n*n));
         else
             mo=0;
             de=0;
             for p=1:n*n
                 mo=mo+A(p)^(Q+1);
                 de=de+A(p)^Q;
             end
             o(i-a,j-a)=mo/de;
         end 
    end
end
o=uint8(o);
end

统计排序滤波器
function [ o ] = orderfilter( I,n,P )
%n*n的滤波器模板对A滤波,其中n为大于零的奇数,s=1为中值滤波器，s=2为最大值滤波器,s=3为最小值滤波,s=4为中点滤波，s=5为d=n
%的修正阿尔法均值滤波
%   此处显示详细说明
[M,N]=size(I);
o=zeros(M,N);
a=(n-1)/2;   %补充长度
A=zeros(n,n);   %临时存储去除的n*n数据
med=(n*n+1)/2;   %med指向中间值
x=zeros(M+2*a,N+2*a);  %填充后的矩阵
for i=1:M;
    for j=1:N
        x(i+a,j+a)=I(i,j);
    end
end

for i=a+1:M+a
    for j=a+1:N+a
         k=1; 
         for I=i-a:i+a
            for J=j-a:j+a
                A(k)=x(I,J);
                k=k+1;
            end
         end
        s=sort(A(:)); %sort(a(:)) 对矩阵a排序 b=sort(a(:)) b(i)就可以取出排序后第i位元素
        if(P==1)
            o(i-a,j-a)=s(med);
        elseif(P==2)
            o(i-a,j-a)=s(n*n);
        elseif(P==3)
            o(i-a,j-a)=s(1);
        elseif(P==4)
            o(i-a,j-a)=0.5*(s(1)+s(n*n));
        elseif(P==5)
            suma=0;
            d=n;
            for p=(d+1):(n*n-d)
                suma=suma+s(p);
            end
            o(i-a,j-a)=suma/(n*n-2*d);
        end
    end
    
end
o=uint8(o);
end


自适应的局部降噪滤波器

function [ o ] = adlocal( I,n,c )
%自适应的局部降噪滤波器,I为污染后的图像，c为噪声的方差
%
[M,N]=size(I);
o=zeros(M,N);
a=(n-1)/2;   %补充长度
A=zeros(n,n);   %临时存储去除的n*n数据
x=zeros(M+2*a,N+2*a);  %填充后的矩阵
for i=1:M;
    for j=1:N
        x(i+a,j+a)=I(i,j);
    end
end
for i=a+1:M+a
    for j=a+1:N+a
         k=1; 
         for I=i-a:i+a
            for J=j-a:j+a
                A(k)=x(I,J);
                k=k+1;
            end
         end
         ul=mean2(A);          %局部均值
         cl=std2(A)^2;         %局部方差
         r=c/cl;
         o(i-a,j-a)=x(i,j)-r*(x(i,j)-ul);
    end
end
o=uint8(o);
end

各个滤波器测试

I=imread('lena.bmp');
I2=imnoise(I,'gaussian',0,0.01);

subplot(241);imshow(I);title('原图');
subplot(242);imshow(I2);title('guassian');
o1=orderfilter( I2,3,1 );subplot(243);imshow(o1);title('中值滤波');
o2=orderfilter( I2,3,2 );subplot(244);imshow(o2);title('最大值滤波');
o3=orderfilter( I2,3,3 );subplot(245);imshow(o3);title('最小值滤波');
o4=orderfilter( I2,3,4 );subplot(246);imshow(o4);title('中点滤波');
o5=orderfilter( I2,3,5 );subplot(247);imshow(o5);title('阿尔法滤波');
figure(2)
subplot(231);imshow(I);title('原图');
subplot(232);imshow(I2);title('guassian');
o7=meanfilter(I2,3,0,0);subplot(233);imshow(o7);title('算术均值');
o8=meanfilter(I2,3,0,1);subplot(234);imshow(o8);title('几何均值');
o9=meanfilter(I2,3,-1,0);subplot(235);imshow(o9);title('谐波均值');
o10=meanfilter(I2,3,1,0);subplot(236);imshow(o10);title('逆谐波均值');

figure(3)
subplot(131);imshow(I);title('原图');
subplot(132);imshow(I2);title('guassian');
o6=adlocal(I2,7,100);subplot(133);imshow(o6);title('自适应局部滤波');

I2=imnoise(I,'salt & pepper',0.1);
figure(4)
subplot(241);imshow(I);title('原图');
subplot(242);imshow(I2);title('salt & pepper');
o1=orderfilter( I2,3,1 );subplot(243);imshow(o1);title('中值滤波');
o2=orderfilter( I2,3,2 );subplot(244);imshow(o2);title('最大值滤波');
o3=orderfilter( I2,3,3 );subplot(245);imshow(o3);title('最小值滤波');
o4=orderfilter( I2,3,4 );subplot(246);imshow(o4);title('中点滤波');
o5=orderfilter( I2,3,5 );subplot(247);imshow(o5);title('阿尔法滤波');
figure(5)
subplot(231);imshow(I);title('原图');
subplot(232);imshow(I2);title('salt & pepper');
o7=meanfilter(I2,3,0,0);subplot(233);imshow(o7);title('算术均值');
o8=meanfilter(I2,3,0,1);subplot(234);imshow(o8);title('几何均值');
o9=meanfilter(I2,3,-1,0);subplot(235);imshow(o9);title('谐波均值');
o10=meanfilter(I2,3,1,0);subplot(236);imshow(o10);title('逆谐波均值');
figure(6)
subplot(131);imshow(I);title('原图');
subplot(132);imshow(I2);title('salt & pepper');
o6=adlocal(I2,7,100);subplot(133);imshow(o6);title('自适应局部滤波');
%自适应局部效果很差，应为已知的噪声方差为0.01，太小了，加到图像上并采用此方法，总是得到和原图差不多的图像

运动模糊方程实现

function [ o ] = blur( I,T,a,b )
%生成M*N维的运动模糊滤波器，输出o为模糊后的图像
%   此处显示详细说明
[M,N]=size(I);
PP=double(I);
P=zeros(2*M,2*N);
%将图像补到2M,2N
for x=1:M
    for y=1:N
        P(x,y)=PP(x,y);
    end
end
Pb=fft2(P);
F1=fftshift(Pb);     %中心平移后的F(u,v)

H=zeros(2*M,2*N);
for u=1:2*M
    for v=1:2*N
        p=3.1415*(a*u+b*v);
        p1=T/p;
        p2=sin(p);
        p3=exp(-1i*p);
        H(u,v)=p1*p2*p3;
    end
end
G=F1.*H;
G=ifftshift(G);
G=ifft2(G);
G=G/(max(G(:)));
G=G*255;
GG=zeros(M,N);
for x=1:M            %取变换后图像的左上部分
    for y=1:N
        GG(x,y)=G(x,y);
    end
end
o=uint8(real(GG));
end


维纳滤波器

I=imread('lena.bmp');

%编程实现维纳滤波
PI=double(I);
Pi=fft2(PI);
F=fftshift(Pi);          %中心平移后的F(u,v)，原图的频谱
I2=blur(I,1,0.1,0.1);    %模糊图像
figure(4)
imshow(I2);
I1=imnoise(I2,'gaussian',0,0.01);
figure(1)
subplot(131);imshow(I);title('原图');
subplot(132);imshow(I1);title('运动模糊+高斯');
PI1=double(I1);
Pb=fft2(PI1);
G=fftshift(Pb);          %中心平移后的G(u,v)，观测图的频谱
[M,N]=size(G);
H=zeros(M,N);
Pw=zeros(M,N);
for u=1:M
    for v=1:N
        p=3.1415*(0.1*u+0.1*v);
        p1=1/p;
        p2=sin(p);
        p3=exp(-1i*p);
        H(u,v)=p1*p2*p3;                           %退化函数频谱
        Pw(u,v)=real(H(u,v))^2+imag(H(u,v))^2;     %退化函数功率谱
    end
end
%寻找一个和原图频谱误差最小的K值
K=0;
cm=exp(1000);
FR=zeros(M,N);            %滤波器恢复图像
Minus=zeros(M,N);
%从0.01-1找到了0.01，从0.001到0.01找到0.004，从0.003到0.005找到
for k=0.003:0.00001:0.005
    for u=1:M
        for v=1:N
            pp1=1/H(u,v);
            pp2=Pw(u,v)/(Pw(u,v)+k);
            pp3=G(u,v);
            FR(u,v)=pp1*pp2*pp3;   
            Minus(u,v)=(real(FR(u,v))-real(F(u,v)))^2;  %计算恢复图像和原图像的差值
        end
    end
    if(cm>sum(Minus(:)))
        K=k;
        cm=sum(Minus(:));
    end
end
%最终利用选择的K去得到恢复图像
for u=1:M
    for v=1:N
        pp1=1/H(u,v);
        pp2=Pw(u,v)/(Pw(u,v)+K);
        pp3=G(u,v);
        FR(u,v)=pp1*pp2*pp3;   
    end
end
FR=ifftshift(FR);
FR=ifft2(FR);
FR=FR/(max(FR(:)));
FR=FR*255;
subplot(133);imshow(uint8(real(FR)));str=['维纳恢复，最佳K=',num2str(K)];title(str);
%matlab自带维纳滤波

psf=fspecial('motion',32,-45);
Im=imfilter(I,psf,'circular','conv');
figure(5)
imshow(Im);
Im=imnoise(Im,'gaussian',0,0.01);
figure(3)
subplot(131);imshow(I);title('原图');
subplot(132);imshow(Im);title('matlab运动模糊+高斯');
noise=imnoise(zeros(size(Im)),'gaussian',0,0.01);
nsr=sum(noise(:).^2)/sum(im2double(I(:)).^2);              %这里的信噪比计算为0.0258，和前面计算的结果0.023差距不大。
IRM=deconvwnr(Im,psf,nsr);
subplot(133);imshow(IRM);title('matlab维纳恢复');

约束最小二乘自己实现

I=imread('lena.bmp');
%编程实现约束最小二乘滤波
PI=double(I);
Pi=fft2(PI);
F=fftshift(Pi);          %中心平移后的F(u,v)，原图的频谱
I2=blur(I,1,0.1,0.1);    %模糊图像
I1=imnoise(I2,'gaussian',0,0.01);
%1.计算噪声均值和方差
g=double(I1);         %I1是加了噪声和运动模糊的观测图像
[M,N]=size(g);
MA=M+2;
NA=N+2;
Noise=imnoise(zeros(MA,NA),'gaussian',0,0.01);
mnoise=mean2(Noise);            %噪声均值
cnoise=std2(Noise)^2;           %噪声方差
normn=MA*NA*(mnoise^2+cnoise^2);  %噪声二范数
%2.观测图像和拉普拉斯模板的频谱
%补零至M+2
gA=zeros(MA,NA);
modelA=zeros(MA,NA);
model=[0 -1 0;-1 4 -1;0 -1 0];
for x=1:M
    for y=1:N
        gA(x,y)=g(x,y);
    end
end
for x=1:3
    for y=1:3
        modelA(x,y)=model(x,y);
    end
end
GA=fft2(gA);
ModelA=fft2(modelA);
GA=fftshift(GA);           %观测图像频谱
ModelA=fftshift(ModelA);   %拉普拉斯模板的频谱
%3.利用模糊公式生成和补零后模板同样大小的退化模板,求出模板的共轭模板，同时生成各个矩阵的功率谱
H=zeros(MA,NA);
HIN=zeros(MA,NA);          %模板的共轭模板
HW=zeros(MA,NA);           %退化函数功率谱
MW=zeros(MA,NA);           %算子模板功率谱

for u=1:MA
    for v=1:NA
        p=3.1415*(0.1*u+0.1*v);
        p1=1/p;
        p2=sin(p);
        p3=exp(-1i*p);
        H(u,v)=p1*p2*p3;                           %退化函数频谱
        HIN(u,v)=real(H(u,v))-imag(H(u,v));        %退化模板的共轭模板
        HW(u,v)=real(H(u,v))^2+imag(H(u,v))^2;     %退化函数功率谱
        MW(u,v)=real(ModelA(u,v))^2+imag(ModelA(u,v))^2; %算子模板功率谱
    end
end
%基于残差向量是系数的单调增函数的事实，逐步减小系数找到满足约束的近似解，然后逐步缩小近似解范围，使得参数更准确
%参数逼近过程： para=1:-0.1:0.1，得到使残差最小的参数Para=0.1；
%para=0.1:-0.01:0.01,Para=0.01; 
%para=0.01:-0.001:0.001,Para=0.001;
%para=0.001:-0.0001:0.0001,Para=0.0001;  
%para=0.0001:-0.00001:0.00001,Para=0.00001;  
%
Fres=zeros(MA,NA);     %恢复图像频谱
R=zeros(MA,NA);        %残差向量的频谱，误差的估计
for para=5:-1:1
    Para=1000000000;               %记录使残差最小的参数
    for u=1:MA
        for v=1:NA
            ppp=HW(u,v)+para*MW(u,v);
            Fres(u,v)=HIN(u,v)*GA(u,v)/ppp;
            R(u,v)=GA(u,v)-H(u,v)*Fres(u,v);
        end
    end
    R=ifftshift(R);
    r1=ifft2(R);       %残差向量，误差的估计
    for u=1:MA
        for v=1:NA
          %  r(u,v)=real(r1(u,v))^2+imag(r1(u,v))^2;       %残差向量的范数
            r(u,v)=real(r1(u,v))^2 ;      %残差向量的范数
        end
    end
    if(sum(r(:))<normn)
        Para=para;
        break;
    end
end
Fres=ifftshift(Fres);
    Fres=real(ifft2(Fres));       %残差向量，误差的估计
    Fres=Fres-min(Fres(:));
    Fres=Fres/max(Fres(:));
    imshow(uint8(Fres*255));


约束最小二乘matlab实现
I=imread('lena.bmp');
psf=fspecial('motion',32,45);
Im=imfilter(I,psf,'circular','conv');
Im=imnoise(Im,'gaussian',0,0.01);
figure(3)
subplot(131);imshow(I);title('原图');
subplot(132);imshow(Im);title('matlab运动模糊+高斯');
V=0.01;
NP=V*prod(size(I));
[J,LAGRA]=deconvreg(Im,psf,NP);
subplot(133);imshow(J);



